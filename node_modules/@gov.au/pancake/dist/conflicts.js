/***************************************************************************************************************************************************************
 *
 * Check an module object for conflicts
 *
 * @repo    - https://github.com/govau/pancake
 * @author  - Dominik Wilkowski
 * @license - https://raw.githubusercontent.com/govau/pancake/master/LICENSE (MIT)
 *
 **************************************************************************************************************************************************************/
'use strict'; //--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Dependencies
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// const Path = require( 'path' );
// const Fs = require( 'fs' );
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Included modules
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('./logging'),
    Log = _require.Log,
    Style = _require.Style;

var Semver = require('./semver-5-3-0'); //--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Default export
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Check modules for conflicts
 *
 * @param  {object} allModules - An object of all modules
 *
 * @return {object}            - An object that can be used to generate an error message
 */


module.exports.CheckModules = function (allModules) {
  var dependencies = new Map(); //a map we populate with the dependencies of our modules we found

  var modules = new Map(); //a map for all installed modules and their versions

  var result = {
    //the return object
    conflicts: false,
    //we always assume the best
    message: "",
    //a couple message to help understand the shemozzle
    module: '',
    //the conflict causing module
    dependencies: {} //other modules that depend on the conflicting module

  }; //add all packages into our maps

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = allModules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var modulePackage = _step.value;
      modules.set(modulePackage.name, modulePackage.version); //saving all modules with version for later comparison

      if (modulePackage.peerDependencies !== undefined) {
        dependencies.set(modulePackage.name, modulePackage.peerDependencies); //save the dependencies into the map for later comparison
      }
    } //iterate over all dependencies [dependencies] and check against what we have installed [modules]

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          _module = _step2$value[0],
          moduleDependencies = _step2$value[1];

      Log.verbose("Checking dependencies for ".concat(Style.yellow(_module), " which are: ").concat(Style.yellow(JSON.stringify(moduleDependencies))));

      var _arr2 = Object.keys(moduleDependencies);

      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        var dependency = _arr2[_i2];
        var version = moduleDependencies[dependency]; //the version we require

        var existing = modules.get(dependency); //the version we have

        if (!Semver.satisfies(existing, version) || existing === undefined) {
          (function () {
            //version conflict or not installed at all?
            result.conflicts = true; //we found a conflict

            result.module = dependency; //with this module

            var requires = existing === undefined ? //building error message
            "the module ".concat(Style.bold(dependency), " but it\u2019s missing.") : "".concat(Style.bold(dependency), " version ").concat(Style.bold(version), ", however version ").concat(Style.bold(existing), " was installed.");
            result.message += "Found conflicting dependenc(ies)\n\n";
            result.message += "The module ".concat(Style.bold(_module), " requires ").concat(requires, "\n"); //let’s look who else depends on this conflicting module

            var otherModules = {};
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = dependencies[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _step3$value = _slicedToArray(_step3.value, 2),
                    subModule = _step3$value[0],
                    subModuleDependencies = _step3$value[1];

                if (subModuleDependencies[dependency] !== undefined) {
                  if (otherModules[subModuleDependencies[dependency]] === undefined) {
                    otherModules[subModuleDependencies[dependency]] = [];
                  }

                  otherModules[subModuleDependencies[dependency]].push(subModule); //sort by version
                }
              } //sort versions

            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            var otherModulesOrdered = {};
            Object.keys(otherModules).sort().forEach(function (key) {
              otherModulesOrdered[key] = otherModules[key];
            });
            result.dependencies = otherModulesOrdered; //generate tree

            result.message += "\n\n".concat(Style.bold(dependency), " is required by the following modules:");

            var _arr3 = Object.keys(otherModulesOrdered);

            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
              var key = _arr3[_i3];
              result.message += Style.bold("\n\n. ".concat(key));

              for (var i = 0; i < otherModulesOrdered[key].length; i++) {
                result.message += "\n".concat(i + 1 == otherModulesOrdered[key].length ? '└' : '├', "\u2500\u2500 ").concat(otherModulesOrdered[key][i]);
              }

              ;
            }

            result.message += "\n\nTo fix this issue make sure all your modules require the same version."; //suggestion...

            if (Object.keys(otherModules).length == 1) {
              result.message += "/nMaybe upgrade the ".concat(Style.bold(dependency), " module.");
            }
          })();
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  Log.verbose("Result of checking:\n".concat(Style.yellow(JSON.stringify(result))));
  return result;
};