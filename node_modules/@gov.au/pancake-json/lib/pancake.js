/***************************************************************************************************************************************************************
 *
 * Plug-in for Pancake
 *
 * Generate a json file from all pancake modules.
 *
 * @repo    - https://github.com/govau/pancake
 * @author  - Dominik Wilkowski
 * @license - https://raw.githubusercontent.com/govau/pancake/master/LICENSE (MIT)
 *
 **************************************************************************************************************************************************************/
'use strict'; //--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Dependencies
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Path = require('path');

var Fs = require('fs'); //--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Module imports
//--------------------------------------------------------------------------------------------------------------------------------------------------------------


var _require = require('@gov.au/pancake'),
    Log = _require.Log,
    Style = _require.Style,
    Loading = _require.Loading,
    ReadFile = _require.ReadFile,
    WriteFile = _require.WriteFile;

Log.output = true; //this plugin assumes you run it through pancake
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Plugin export
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * The main pancake method for this plugin
 *
 * @param  {array}  version        - The version of mother pancake
 * @param  {array}  modules        - An array of all module objects
 * @param  {object} settings       - An object of the host package.json file and itâ€™s path
 * @param  {object} GlobalSettings - An object of the global settings
 * @param  {object} cwd            - The path to the working directory of our host package.json file
 *
 * @return {Promise object}  - Returns an object of the settings we want to save
 */

module.exports.pancake = function (version, modules, settings, GlobalSettings, cwd) {
  Loading.start('pancake-json', Log.verboseMode); //--------------------------------------------------------------------------------------------------------------------------------------------------------------
  // Settings
  //--------------------------------------------------------------------------------------------------------------------------------------------------------------

  var SETTINGS = {
    json: {
      enable: false,
      location: 'pancake/',
      name: 'pancake',
      content: {
        name: true,
        version: true,
        dependencies: true,
        path: true,
        settings: true
      }
    }
  }; //merging settings with host settings

  Object.assign(SETTINGS.json, settings.json);

  if (typeof settings.json === 'undefined') {
    settings.json = {};
  }

  Object.assign(SETTINGS.json.content, settings.json.content);
  return new Promise(function (resolve, reject) {
    //some housekeeping
    if (typeof version !== 'string') {
      reject("Plugin pancake-json got a mismatch for the data that was passed to it! ".concat(Style.yellow("version"), " was ").concat(Style.yellow(_typeof(version)), " ") + "but should have been ".concat(Style.yellow("string")));
    }

    if (_typeof(modules) !== 'object') {
      reject("Plugin pancake-json got a mismatch for the data that was passed to it! ".concat(Style.yellow("modules"), " was ").concat(Style.yellow(_typeof(modules)), " ") + "but should have been ".concat(Style.yellow("object")));
    }

    if (_typeof(settings) !== 'object') {
      reject("Plugin pancake-json got a mismatch for the data that was passed to it! ".concat(Style.yellow("settings"), " was ").concat(Style.yellow(_typeof(settings)), " ") + "but should have been ".concat(Style.yellow("object")));
    }

    if (typeof cwd !== 'string') {
      reject("Plugin pancake-json got a mismatch for the data that was passed to it! ".concat(Style.yellow("cwd"), " was ").concat(Style.yellow(_typeof(cwd)), " ") + "but should have been ".concat(Style.yellow("string")));
    } //--------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Promise loop
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------


    var JSONOutput = {}; //--------------------------------------------------------------------------------------------------------------------------------------------------------------
    // Iterate over each module
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------

    if (SETTINGS.json.enable) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var modulePackage = _step.value;
          Log.verbose("JSON: Building ".concat(Style.yellow(modulePackage.name)));
          JSONOutput[modulePackage.name] = {};

          if (SETTINGS.json.content.name) {
            JSONOutput[modulePackage.name].name = modulePackage.name;
          }

          if (SETTINGS.json.content.version) {
            JSONOutput[modulePackage.name].version = modulePackage.version;
          }

          if (SETTINGS.json.content.dependencies) {
            JSONOutput[modulePackage.name].dependencies = modulePackage.peerDependencies;
          }

          if (SETTINGS.json.content.path) {
            JSONOutput[modulePackage.name].path = modulePackage.path;
          }

          if (SETTINGS.json.content.settings) {
            JSONOutput[modulePackage.name].settings = modulePackage.pancake['pancake-module'];
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (Object.keys(JSONOutput).length > 0) {
        var jsonPath = Path.normalize("".concat(cwd, "/").concat(SETTINGS.json.location, "/").concat(SETTINGS.json.name, ".json"));
        WriteFile(jsonPath, JSON.stringify(JSONOutput)) //write the generated content to file and return its promise
        .catch(function (error) {
          Log.error(error);
          reject(error);
        }).then(function () {
          Log.ok('JSON PLUGIN FINISHED');
          Loading.stop('pancake-json', Log.verboseMode); //stop loading animation

          resolve(SETTINGS);
        });
      } else {
        Loading.stop('pancake-json', Log.verboseMode); //stop loading animation

        Log.info("No pancake modules found \uD83D\uDE2C");
        resolve(SETTINGS);
      }
    } else {
      Log.ok('JSON PLUGIN DISABLED');
      Loading.stop('pancake-json', Log.verboseMode); //stop loading animation

      resolve(SETTINGS);
    }
  });
};