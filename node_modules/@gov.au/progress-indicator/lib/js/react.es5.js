"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.AUprogressIndicatorItem=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * All status options, can be overwritten
 *
 * @type {Object}
 */var StatusText={doing:"Doing",todo:"To do",done:"Done"};/**
 * An item inside the AUprogressIndicator component
 *
 * @param  {string}   link             - The link URL, If no link is passed we render a button instead of a link tag, optional
 * @param  {string}  linkComponent     - The component used for the link
 * @param  {string}   text             - The text of this item
 * @param  {string}   status           - The status of this item
 * @param  {string}   statusText       - The status text of this item, optional
 * @param  {string}   className        - An additional class, optional
 * @param  {object}   li               - An additional object to be spread into the wrapping element, optional
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUprogressIndicatorItem=function AUprogressIndicatorItem(_ref){var link=_ref.link,linkComponent=_ref.linkComponent,text=_ref.text,status=_ref.status,statusText=_ref.statusText,_ref$className=_ref.className,className=_ref$className===void 0?"":_ref$className,_ref$li=_ref.li,li=_ref$li===void 0?{}:_ref$li,attributeOptions=_objectWithoutProperties(_ref,["link","linkComponent","text","status","statusText","className","li"]);var LinkComponent=linkComponent;if(link){// If we are using a normal link
if(LinkComponent==="a"){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==="function"){attributeOptions.to=link}}return _react.default.createElement("li",li,link?_react.default.createElement(LinkComponent,_extends({className:"au-progress-indicator__link au-progress-indicator__link--".concat(status," ").concat(className)},attributeOptions),_react.default.createElement("span",{className:"au-progress-indicator__status"},statusText?statusText:StatusText[status]),text):_react.default.createElement("button",_extends({className:"au-progress-indicator__link au-progress-indicator__link--".concat(status," ").concat(className)},attributeOptions),_react.default.createElement("span",{className:"au-progress-indicator__status"},statusText?statusText:StatusText[status]),text))};exports.AUprogressIndicatorItem=AUprogressIndicatorItem;AUprogressIndicatorItem.propTypes={link:_propTypes.default.string,text:_propTypes.default.string.isRequired,status:_propTypes.default.PropTypes.oneOf(["doing","todo","done"]).isRequired,statusText:_propTypes.default.string,li:_propTypes.default.object,linkComponent:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.func])};AUprogressIndicatorItem.defaultProps={linkComponent:"a"};/**
 * DEFAULT
 * The progress-indicator component
 *
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {array}   items            - All items for this progress indicator
 * @param  {string}  className        - An additional class, optional
 * @param  {string}  linkComponent    - The component used for the link
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUprogressIndicator=function AUprogressIndicator(_ref2){var dark=_ref2.dark,linkComponent=_ref2.linkComponent,items=_ref2.items,_ref2$className=_ref2.className,className=_ref2$className===void 0?"":_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,["dark","linkComponent","items","className"]);return _react.default.createElement("ul",_extends({className:"au-progress-indicator".concat(dark?" au-progress-indicator--dark":""," ").concat(className)},attributeOptions),items.map(function(item,i){return _react.default.createElement(AUprogressIndicatorItem,_extends({linkComponent:linkComponent,key:i},item))}))};AUprogressIndicator.propTypes={dark:_propTypes.default.bool,items:_propTypes.default.arrayOf(_propTypes.default.shape({link:_propTypes.default.string,text:_propTypes.default.string.isRequired,status:_propTypes.default.PropTypes.oneOf(["doing","todo","done"]).isRequired,statusText:_propTypes.default.string,li:_propTypes.default.object})).isRequired,linkComponent:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.func])};AUprogressIndicator.defaultProps={linkComponent:"a"};var _default=AUprogressIndicator;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,