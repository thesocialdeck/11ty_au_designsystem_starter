"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=exports.AUtag=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * TODO
 * @param  {string}  link             - The link for this tag, optional
 * @param  {string}  text             - The text for the tag
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUtag=function AUtag(_ref){var link=_ref.link,dark=_ref.dark,text=_ref.text,linkComponent=_ref.linkComponent,className=_ref.className,attributeOptions=_objectWithoutProperties(_ref,["link","dark","text","linkComponent","className"]);var TagContainer="span";var LinkComponent=linkComponent;if(LinkComponent==="a"){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==="function"){attributeOptions.to=link}return link?_react["default"].createElement(LinkComponent,_extends({className:"au-tag ".concat(dark?"au-tag--dark":""," ").concat(className)},attributeOptions),text):_react["default"].createElement(TagContainer,_extends({},attributeOptions,{className:"au-tag ".concat(dark?"au-tag--dark":""," ").concat(className)}),text)};exports.AUtag=AUtag;AUtag.propTypes={link:_propTypes["default"].string,text:_propTypes["default"].string.isRequired,li:_propTypes["default"].object,linkComponent:_propTypes["default"].oneOfType([_propTypes["default"].string,_propTypes["default"].func])};AUtag.defaultProps={linkComponent:"a",className:""};/**
 * DEFAULT
 * The tags component
 *
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {array}   tags             - The tags, format: { link: '', text: '', onClick: () }
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  li               - An additional object to be spread into the list item
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUtagList=function AUtagList(_ref2){var dark=_ref2.dark,tags=_ref2.tags,_ref2$className=_ref2.className,className=_ref2$className===void 0?"":_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,["dark","tags","className"]);return _react["default"].createElement("ul",_extends({className:"au-tag-list ".concat(className)},attributeOptions),tags.map(function(tag,i){return _react["default"].createElement("li",_extends({key:i},tag.li),_react["default"].createElement(AUtag,_extends({dark:dark,linkComponent:tag.linkComponent,link:tag.link,text:tag.text},tag.attributeOptions)))}))};AUtagList.propTypes={dark:_propTypes["default"].bool,tags:_propTypes["default"].arrayOf(_propTypes["default"].shape({link:_propTypes["default"].string,text:_propTypes["default"].string.isRequired,li:_propTypes["default"].object})).isRequired,className:_propTypes["default"].string};AUtagList.defaultProps={dark:false};var _default=AUtagList;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJBVXRhZyIsImxpbmsiLCJkYXJrIiwidGV4dCIsImxpbmtDb21wb25lbnQiLCJjbGFzc05hbWUiLCJhdHRyaWJ1dGVPcHRpb25zIiwiVGFnQ29udGFpbmVyIiwiTGlua0NvbXBvbmVudCIsImhyZWYiLCJ0byIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJsaSIsIm9iamVjdCIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiLCJBVXRhZ0xpc3QiLCJ0YWdzIiwibWFwIiwidGFnIiwiaSIsImJvb2wiLCJhcnJheU9mIiwic2hhcGUiXSwibWFwcGluZ3MiOiI4R0FTQSxvREFDQSw2RCw0aUNBRUE7Ozs7OztHQU9PLEdBQU1BLENBQUFBLEtBQUssQ0FBRyxRQUFSQSxDQUFBQSxLQUFRLE1BQXlFLElBQXRFQyxDQUFBQSxJQUFzRSxNQUF0RUEsSUFBc0UsQ0FBaEVDLElBQWdFLE1BQWhFQSxJQUFnRSxDQUExREMsSUFBMEQsTUFBMURBLElBQTBELENBQXBEQyxhQUFvRCxNQUFwREEsYUFBb0QsQ0FBckNDLFNBQXFDLE1BQXJDQSxTQUFxQyxDQUF2QkMsZ0JBQXVCLG1GQUU3RixHQUFJQyxDQUFBQSxZQUFZLENBQUcsTUFBbkIsQ0FDQSxHQUFJQyxDQUFBQSxhQUFhLENBQUdKLGFBQXBCLENBR0EsR0FBSUksYUFBYSxHQUFLLEdBQXRCLENBQTRCLENBQzNCRixnQkFBZ0IsQ0FBQ0csSUFBakIsQ0FBd0JSLElBQ3hCLENBQ0Q7QUFIQSxJQUlLLElBQUksTUFBT08sQ0FBQUEsYUFBUCxHQUF5QixVQUE3QixDQUEwQyxDQUM5Q0YsZ0JBQWdCLENBQUNJLEVBQWpCLENBQXNCVCxJQUN0QixDQUVELE1BQ0NBLENBQUFBLElBQUksQ0FDSCxnQ0FBQyxhQUFELFdBQWUsU0FBUyxrQkFBYUMsSUFBSSxDQUFHLGNBQUgsQ0FBb0IsRUFBckMsYUFBMkNHLFNBQTNDLENBQXhCLEVBQXFGQyxnQkFBckYsRUFBMEdILElBQTFHLENBREcsQ0FHSCxnQ0FBQyxZQUFELGFBQWtCRyxnQkFBbEIsRUFBb0MsU0FBUyxrQkFBYUosSUFBSSxDQUFHLGNBQUgsQ0FBb0IsRUFBckMsYUFBMkNHLFNBQTNDLENBQTdDLEdBQ0VGLElBREYsQ0FJRixDQXRCTSxDLG9CQXlCUEgsS0FBSyxDQUFDVyxTQUFOLENBQWtCLENBQ2pCVixJQUFJLENBQUVXLHNCQUFVQyxNQURDLENBRWpCVixJQUFJLENBQUVTLHNCQUFVQyxNQUFWLENBQWlCQyxVQUZOLENBR2pCQyxFQUFFLENBQUVILHNCQUFVSSxNQUhHLENBSWpCWixhQUFhLENBQUVRLHNCQUFVSyxTQUFWLENBQW9CLENBQUVMLHNCQUFVQyxNQUFaLENBQW9CRCxzQkFBVU0sSUFBOUIsQ0FBcEIsQ0FKRSxDQUFsQixDQU9BbEIsS0FBSyxDQUFDbUIsWUFBTixDQUFxQixDQUNwQmYsYUFBYSxDQUFFLEdBREssQ0FFcEJDLFNBQVMsQ0FBRSxFQUZTLENBQXJCLENBT0E7Ozs7Ozs7OztHQVVBLEdBQU1lLENBQUFBLFNBQVMsQ0FBRyxRQUFaQSxDQUFBQSxTQUFZLFdBQUdsQixDQUFBQSxJQUFILE9BQUdBLElBQUgsQ0FBU21CLElBQVQsT0FBU0EsSUFBVCx1QkFBZWhCLFNBQWYsQ0FBZUEsU0FBZiwwQkFBMkIsRUFBM0IsaUJBQWtDQyxnQkFBbEMsbUVBQ2pCLGdEQUFJLFNBQVMsdUJBQW1CRCxTQUFuQixDQUFiLEVBQW9EQyxnQkFBcEQsRUFFRWUsSUFBSSxDQUFDQyxHQUFMLENBQ0MsU0FBRUMsR0FBRixDQUFPQyxDQUFQLFFBQ0MsZ0RBQUksR0FBRyxDQUFFQSxDQUFULEVBQWdCRCxHQUFHLENBQUNSLEVBQXBCLEVBQ0MsZ0NBQUMsS0FBRCxXQUNDLElBQUksQ0FBRWIsSUFEUCxDQUVDLGFBQWEsQ0FBR3FCLEdBQUcsQ0FBQ25CLGFBRnJCLENBR0MsSUFBSSxDQUFFbUIsR0FBRyxDQUFDdEIsSUFIWCxDQUlDLElBQUksQ0FBRXNCLEdBQUcsQ0FBQ3BCLElBSlgsRUFLS29CLEdBQUcsQ0FBQ2pCLGdCQUxULEVBREQsQ0FERCxDQURELENBRkYsQ0FEaUIsQ0FBbEIsQ0FvQkFjLFNBQVMsQ0FBQ1QsU0FBVixDQUFzQixDQUNyQlQsSUFBSSxDQUFFVSxzQkFBVWEsSUFESyxDQUVyQkosSUFBSSxDQUFFVCxzQkFBVWMsT0FBVixDQUNMZCxzQkFBVWUsS0FBVixDQUFnQixDQUNmMUIsSUFBSSxDQUFFVyxzQkFBVUMsTUFERCxDQUVmVixJQUFJLENBQUVTLHNCQUFVQyxNQUFWLENBQWlCQyxVQUZSLENBR2ZDLEVBQUUsQ0FBRUgsc0JBQVVJLE1BSEMsQ0FBaEIsQ0FESyxFQU1KRixVQVJtQixDQVNyQlQsU0FBUyxDQUFFTyxzQkFBVUMsTUFUQSxDQUF0QixDQVlBTyxTQUFTLENBQUNELFlBQVYsQ0FBeUIsQ0FDeEJqQixJQUFJLENBQUUsS0FEa0IsQ0FBekIsQyxhQUlla0IsUyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBAZ292LmF1L3RhZ3MgdjQuMC4wICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogdGFncyBmdW5jdGlvblxuICpcbiAqIFVzZSB0YWdzIHRvIGFwcGx5IGEgdGF4b25vbXkgYW5kIGxpbmsgdG8gc2ltaWxhciBjb250ZW50LlxuICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8qKlxuICogVE9ET1xuICogQHBhcmFtICB7c3RyaW5nfSAgbGluayAgICAgICAgICAgICAtIFRoZSBsaW5rIGZvciB0aGlzIHRhZywgb3B0aW9uYWxcbiAqIEBwYXJhbSAge3N0cmluZ30gIHRleHQgICAgICAgICAgICAgLSBUaGUgdGV4dCBmb3IgdGhlIHRhZ1xuICogQHBhcmFtICB7Ym9vbGVhbn0gZGFyayAgICAgICAgICAgICAtIEFkZCB0aGUgZGFyayB2YXJpYXRpb24gY2xhc3MsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtvYmplY3R9ICBhdHRyaWJ1dGVPcHRpb25zIC0gQW55IG90aGVyIGF0dHJpYnV0ZSBvcHRpb25zXG4gKi9cbmV4cG9ydCBjb25zdCBBVXRhZyA9ICh7IGxpbmssIGRhcmssIHRleHQsIGxpbmtDb21wb25lbnQsIGNsYXNzTmFtZSwgLi4uYXR0cmlidXRlT3B0aW9ucyB9KSA9PiB7XG5cblx0bGV0IFRhZ0NvbnRhaW5lciA9ICdzcGFuJztcblx0bGV0IExpbmtDb21wb25lbnQgPSBsaW5rQ29tcG9uZW50O1xuXG5cblx0aWYoIExpbmtDb21wb25lbnQgPT09ICdhJyApIHtcblx0XHRhdHRyaWJ1dGVPcHRpb25zLmhyZWYgPSBsaW5rO1xuXHR9XG5cdC8vIElmIHdlIGFyZSB1c2luZyBhIGxpbmsgY29tcG9uZW50XG5cdGVsc2UgaWYoIHR5cGVvZiBMaW5rQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICkge1xuXHRcdGF0dHJpYnV0ZU9wdGlvbnMudG8gPSBsaW5rO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHRsaW5rID9cblx0XHRcdDxMaW5rQ29tcG9uZW50IGNsYXNzTmFtZT17YGF1LXRhZyAkeyBkYXJrID8gJ2F1LXRhZy0tZGFyaycgOiAnJ30gJHtjbGFzc05hbWV9YH0geyAuLi5hdHRyaWJ1dGVPcHRpb25zIH0+eyB0ZXh0IH08L0xpbmtDb21wb25lbnQ+XG5cdFx0XHQ6XG5cdFx0XHQ8VGFnQ29udGFpbmVyIHsuLi5hdHRyaWJ1dGVPcHRpb25zfSBjbGFzc05hbWU9e2BhdS10YWcgJHsgZGFyayA/ICdhdS10YWctLWRhcmsnIDogJyd9ICR7Y2xhc3NOYW1lfWB9PlxuXHRcdFx0XHR7dGV4dH1cblx0XHRcdDwvVGFnQ29udGFpbmVyPlxuXHQpXG59XG5cblxuQVV0YWcucHJvcFR5cGVzID0ge1xuXHRsaW5rOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdGxpOiBQcm9wVHlwZXMub2JqZWN0LFxuXHRsaW5rQ29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFsgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMgXSksXG59O1xuXG5BVXRhZy5kZWZhdWx0UHJvcHMgPSB7XG5cdGxpbmtDb21wb25lbnQ6ICdhJyxcblx0Y2xhc3NOYW1lOiAnJ1xufTtcblxuXG5cbi8qKlxuICogREVGQVVMVFxuICogVGhlIHRhZ3MgY29tcG9uZW50XG4gKlxuICogQHBhcmFtICB7Ym9vbGVhbn0gZGFyayAgICAgICAgICAgICAtIEFkZCB0aGUgZGFyayB2YXJpYXRpb24gY2xhc3MsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHthcnJheX0gICB0YWdzICAgICAgICAgICAgIC0gVGhlIHRhZ3MsIGZvcm1hdDogeyBsaW5rOiAnJywgdGV4dDogJycsIG9uQ2xpY2s6ICgpIH1cbiAqIEBwYXJhbSAge3N0cmluZ30gIGNsYXNzTmFtZSAgICAgICAgLSBBbiBhZGRpdGlvbmFsIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7b2JqZWN0fSAgbGkgICAgICAgICAgICAgICAtIEFuIGFkZGl0aW9uYWwgb2JqZWN0IHRvIGJlIHNwcmVhZCBpbnRvIHRoZSBsaXN0IGl0ZW1cbiAqIEBwYXJhbSAge29iamVjdH0gIGF0dHJpYnV0ZU9wdGlvbnMgLSBBbnkgb3RoZXIgYXR0cmlidXRlIG9wdGlvbnNcbiAqL1xuY29uc3QgQVV0YWdMaXN0ID0gKHsgZGFyaywgdGFncywgY2xhc3NOYW1lID0gJycsIC4uLmF0dHJpYnV0ZU9wdGlvbnMgfSkgPT4gKFxuXHQ8dWwgY2xhc3NOYW1lPXsgYGF1LXRhZy1saXN0ICR7IGNsYXNzTmFtZSB9YCB9IHsgLi4uYXR0cmlidXRlT3B0aW9ucyB9PlxuXHRcdHtcblx0XHRcdHRhZ3MubWFwKFxuXHRcdFx0XHQoIHRhZywgaSApID0+IChcblx0XHRcdFx0XHQ8bGkga2V5PXtpfSB7Li4udGFnLmxpfT5cblx0XHRcdFx0XHRcdDxBVXRhZ1xuXHRcdFx0XHRcdFx0XHRkYXJrPXtkYXJrfVxuXHRcdFx0XHRcdFx0XHRsaW5rQ29tcG9uZW50PXsgdGFnLmxpbmtDb21wb25lbnQgfVxuXHRcdFx0XHRcdFx0XHRsaW5rPXt0YWcubGlua31cblx0XHRcdFx0XHRcdFx0dGV4dD17dGFnLnRleHR9XG5cdFx0XHRcdFx0XHRcdHsuLi50YWcuYXR0cmlidXRlT3B0aW9uc31cblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdH1cblx0PC91bD5cbik7XG5cbkFVdGFnTGlzdC5wcm9wVHlwZXMgPSB7XG5cdGRhcms6IFByb3BUeXBlcy5ib29sLFxuXHR0YWdzOiBQcm9wVHlwZXMuYXJyYXlPZihcblx0XHRQcm9wVHlwZXMuc2hhcGUoe1xuXHRcdFx0bGluazogUHJvcFR5cGVzLnN0cmluZyxcblx0XHRcdHRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0XHRcdGxpOiBQcm9wVHlwZXMub2JqZWN0LFxuXHRcdH0pXG5cdCkuaXNSZXF1aXJlZCxcblx0Y2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuQVV0YWdMaXN0LmRlZmF1bHRQcm9wcyA9IHtcblx0ZGFyazogZmFsc2Vcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFVdGFnTGlzdDtcbiJdfQ==