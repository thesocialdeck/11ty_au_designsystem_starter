"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.AUlegend=exports.AUfieldset=exports.AUformGroup=exports.AUerrorText=exports.AUhintText=exports.AUlabel=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * The label component
 *
 * @param  {string}  text            - Text of the label, required
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {boolean} inline           - Display the label inline, optional
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUlabel=function AUlabel(_ref){var text=_ref.text,dark=_ref.dark,inline=_ref.inline,className=_ref.className,attributeOptions=_objectWithoutProperties(_ref,["text","dark","inline","className"]);return _react["default"].createElement("label",_extends({className:"au-label ".concat(className)+"".concat(dark?" au-label--dark":"")+"".concat(inline?" au-label--inline":"")},attributeOptions),text)};exports.AUlabel=AUlabel;AUlabel.propTypes={/**
	 * Text of the label, required
	 */text:_propTypes["default"].string.isRequired,/**
	 * Add the dark variation class, optional
	 */dark:_propTypes["default"].bool,/**
	 * Display the label inline, optional
	 */inline:_propTypes["default"].bool,/**
	 * An additional class, optional
	 */className:_propTypes["default"].string};AUlabel.defaultProps={className:""/**
 * The hint text component
 *
 * @param  {string}  text             - Text of the label, required
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {boolean} alt              - Add the alt variation class, optional
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */};var AUhintText=function AUhintText(_ref2){var text=_ref2.text,dark=_ref2.dark,alt=_ref2.alt,className=_ref2.className,attributeOptions=_objectWithoutProperties(_ref2,["text","dark","alt","className"]);return _react["default"].createElement("span",_extends({className:"au-hint-text ".concat(className)+"".concat(alt?" au-hint-text--alt":"")+"".concat(dark?" au-hint-text--dark":"")},attributeOptions),text)};exports.AUhintText=AUhintText;AUhintText.propTypes={/**
	 * Text of the label, required
	 */text:_propTypes["default"].string.isRequired,/**
	 * Add the dark variation class, optional
	 */alt:_propTypes["default"].bool,/**
	 * Add the alt variation class, optional
	 */dark:_propTypes["default"].bool,/**
	 * An additional class, optional
	 */className:_propTypes["default"].string};AUhintText.defaultProps={className:""/**
 * The error text component
 *
 * @param  {string}  text            - Text of the label, required
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {boolean} inline           - Display the error text inline, optional
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */};var AUerrorText=function AUerrorText(_ref3){var text=_ref3.text,dark=_ref3.dark,inline=_ref3.inline,className=_ref3.className,attributeOptions=_objectWithoutProperties(_ref3,["text","dark","inline","className"]);return _react["default"].createElement("span",_extends({className:"au-error-text ".concat(className)+"".concat(dark?" au-error-text--dark":"")+"".concat(inline?" au-error-text--inline":"")},attributeOptions),text)};exports.AUerrorText=AUerrorText;AUerrorText.propTypes={/**
	 * Text of the label, required
	 */dark:_propTypes["default"].bool,/**
	 * Add the dark variation class, optional
	 */text:_propTypes["default"].string.isRequired,/**
	 * Display the error text inline, optional
	 */inline:_propTypes["default"].bool,/**
	 * An additional class, optional
	 */className:_propTypes["default"].string};AUerrorText.defaultProps={className:""/**
 * The form group component
 *
 * @param  {string}  status           - Adds invalid state to form group
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */};var AUformGroup=function AUformGroup(_ref4){var status=_ref4.status,dark=_ref4.dark,className=_ref4.className,attributeOptions=_objectWithoutProperties(_ref4,["status","dark","className"]);return _react["default"].createElement("div",_extends({className:"au-form-group ".concat(className)+"".concat(status==="invalid"?" au-form-group--invalid ":"")},attributeOptions))};exports.AUformGroup=AUformGroup;AUformGroup.propTypes={/**
	 * Adds invalid state to form group
	 */status:_propTypes["default"].oneOf(["valid","invalid"]),/**
	 * An additional class, optional
	 */className:_propTypes["default"].string};AUformGroup.defaultProps={status:"valid",className:""/**
 * The fieldset component
 *
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */};var AUfieldset=function AUfieldset(_ref5){var dark=_ref5.dark,className=_ref5.className,attributeOptions=_objectWithoutProperties(_ref5,["dark","className"]);return _react["default"].createElement("fieldset",_extends({className:"au-fieldset ".concat(className)+"".concat(dark?" au-fieldset--dark":"")},attributeOptions))};exports.AUfieldset=AUfieldset;AUfieldset.propTypes={/**
	 * An additional class, optional
	 */className:_propTypes["default"].string};AUfieldset.defaultProps={className:""/**
 * The legend component
 *
 * @param  {object}  attributeOptions - Any other attribute options
 */};var AUlegend=function AUlegend(_ref6){var attributeOptions=_extends({},_ref6);return _react["default"].createElement("legend",_extends({className:"au-fieldset__legend"},attributeOptions))};exports.AUlegend=AUlegend;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,