"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=exports.AUlinkListItem=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * An item inside the AUlinkList component
 *
 * @param  {node}   text             - The link Text or link html
 * @param  {string} link             - The link URL, optional
 * @param  {string} linkComponent    - The component used for the link
 * @param  {object} li               - An additional object to be spread into the wrapping element, optional
 * @param  {object} onClick          - The onClick event handler
 * @param  {object} attributeOptions - Any other attribute options, optional
 */var AUlinkListItem=function AUlinkListItem(_ref){var text=_ref.text,link=_ref.link,linkComponent=_ref.linkComponent,_ref$li=_ref.li,li=_ref$li===void 0?{}:_ref$li,children=_ref.children,onClick=_ref.onClick,attributeOptions=_objectWithoutProperties(_ref,["text","link","linkComponent","li","children","onClick"]);var LinkComponent=linkComponent;// If there is no link provided and an onClick function
if(typeof onClick==="function"){attributeOptions.onClick=onClick;// if we find an onClick event but no link we make it a link so onClick can be added (no button support yet)
if(!link){link="#"}}// If we are using a normal link
if(LinkComponent==="a"){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==="function"){attributeOptions.to=link}if(link){return _react["default"].createElement("li",li,_react["default"].createElement(LinkComponent,attributeOptions,text),children)}return _react["default"].createElement("li",li,text,children)};exports.AUlinkListItem=AUlinkListItem;AUlinkListItem.propTypes={text:_propTypes["default"].node.isRequired,link:_propTypes["default"].string,li:_propTypes["default"].object,onClick:_propTypes["default"].func,linkComponent:_propTypes["default"].oneOfType([_propTypes["default"].string,_propTypes["default"].func])};AUlinkListItem.defaultProps={linkComponent:"a"};/**
 * DEFAULT
 * The Link List component
 *
 * @param  {array}   items            - All items inside the link list to be passed to AUlinkListItem, format: { link: '', text: '', onClick: () }
 * @param  {string}  className        - An additional class, optional
 * @param  {string}  linkComponent    - The component used for the link
 * @param  {object}  attributeOptions - Any other attribute options, optional
 */var AUlinkList=function AUlinkList(_ref2){var inline=_ref2.inline,items=_ref2.items,linkComponent=_ref2.linkComponent,_ref2$className=_ref2.className,className=_ref2$className===void 0?"":_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,["inline","items","linkComponent","className"]);return _react["default"].createElement("ul",_extends({className:"au-link-list ".concat(className).concat(inline?" au-link-list--inline":"")},attributeOptions),items.map(function(item,i){return _react["default"].createElement(AUlinkListItem,_extends({linkComponent:linkComponent,key:i},item))}))};AUlinkList.propTypes={inline:_propTypes["default"].bool,items:_propTypes["default"].arrayOf(_propTypes["default"].shape({link:_propTypes["default"].string,text:_propTypes["default"].node.isRequired,li:_propTypes["default"].object})).isRequired,linkComponent:_propTypes["default"].oneOfType([_propTypes["default"].string,_propTypes["default"].func])};AUlinkList.defaultProps={linkComponent:"a"};var _default=AUlinkList;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJBVWxpbmtMaXN0SXRlbSIsInRleHQiLCJsaW5rIiwibGlua0NvbXBvbmVudCIsImxpIiwiY2hpbGRyZW4iLCJvbkNsaWNrIiwiYXR0cmlidXRlT3B0aW9ucyIsIkxpbmtDb21wb25lbnQiLCJocmVmIiwidG8iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJub2RlIiwiaXNSZXF1aXJlZCIsInN0cmluZyIsIm9iamVjdCIsImZ1bmMiLCJvbmVPZlR5cGUiLCJkZWZhdWx0UHJvcHMiLCJBVWxpbmtMaXN0IiwiaW5saW5lIiwiaXRlbXMiLCJjbGFzc05hbWUiLCJtYXAiLCJpdGVtIiwiaSIsImJvb2wiLCJhcnJheU9mIiwic2hhcGUiXSwibWFwcGluZ3MiOiJ1SEFTQSxvREFDQSw2REFNQSw2Qiw0aUNBRUE7Ozs7Ozs7OztHQVVPLEdBQU1BLENBQUFBLGNBQWMsQ0FBRyxRQUFqQkEsQ0FBQUEsY0FBaUIsTUFBb0YsSUFBakZDLENBQUFBLElBQWlGLE1BQWpGQSxJQUFpRixDQUEzRUMsSUFBMkUsTUFBM0VBLElBQTJFLENBQXJFQyxhQUFxRSxNQUFyRUEsYUFBcUUsY0FBdERDLEVBQXNELENBQXREQSxFQUFzRCxrQkFBakQsRUFBaUQsU0FBN0NDLFFBQTZDLE1BQTdDQSxRQUE2QyxDQUFuQ0MsT0FBbUMsTUFBbkNBLE9BQW1DLENBQXZCQyxnQkFBdUIsMEZBQ2pILEdBQU1DLENBQUFBLGFBQWEsQ0FBR0wsYUFBdEIsQ0FFQTtBQUNBLEdBQUksTUFBT0csQ0FBQUEsT0FBUCxHQUFtQixVQUF2QixDQUFvQyxDQUNuQ0MsZ0JBQWdCLENBQUNELE9BQWpCLENBQTJCQSxPQUEzQixDQUVBO0FBQ0EsR0FBSSxDQUFDSixJQUFMLENBQVksQ0FDWEEsSUFBSSxDQUFHLEdBQ1AsQ0FDRCxDQUVEO0FBQ0EsR0FBSU0sYUFBYSxHQUFLLEdBQXRCLENBQTRCLENBQzNCRCxnQkFBZ0IsQ0FBQ0UsSUFBakIsQ0FBd0JQLElBQ3hCLENBQ0Q7QUFIQSxJQUlLLElBQUksTUFBT00sQ0FBQUEsYUFBUCxHQUF5QixVQUE3QixDQUEwQyxDQUM5Q0QsZ0JBQWdCLENBQUNHLEVBQWpCLENBQXNCUixJQUN0QixDQUVELEdBQUlBLElBQUosQ0FBVSxDQUNULE1BQ0Msc0NBQVNFLEVBQVQsQ0FDQyxnQ0FBQyxhQUFELENBQW9CRyxnQkFBcEIsQ0FBeUNOLElBQXpDLENBREQsQ0FFR0ksUUFGSCxDQUtELENBRUQsTUFBUyxzQ0FBU0QsRUFBVCxDQUFnQkgsSUFBaEIsQ0FBd0JJLFFBQXhCLENBQ1QsQ0FoQ00sQyxzQ0FrQ1BMLGNBQWMsQ0FBQ1csU0FBZixDQUEyQixDQUMxQlYsSUFBSSxDQUFFVyxzQkFBVUMsSUFBVixDQUFlQyxVQURLLENBRTFCWixJQUFJLENBQUVVLHNCQUFVRyxNQUZVLENBRzFCWCxFQUFFLENBQUVRLHNCQUFVSSxNQUhZLENBSTFCVixPQUFPLENBQUVNLHNCQUFVSyxJQUpPLENBSzFCZCxhQUFhLENBQUVTLHNCQUFVTSxTQUFWLENBQW9CLENBQUVOLHNCQUFVRyxNQUFaLENBQW9CSCxzQkFBVUssSUFBOUIsQ0FBcEIsQ0FMVyxDQUEzQixDQVFBakIsY0FBYyxDQUFDbUIsWUFBZixDQUE4QixDQUM3QmhCLGFBQWEsQ0FBRSxHQURjLENBQTlCLENBS0E7Ozs7Ozs7O0dBU0EsR0FBTWlCLENBQUFBLFVBQVUsQ0FBRyxRQUFiQSxDQUFBQSxVQUFhLFdBQUdDLENBQUFBLE1BQUgsT0FBR0EsTUFBSCxDQUFXQyxLQUFYLE9BQVdBLEtBQVgsQ0FBa0JuQixhQUFsQixPQUFrQkEsYUFBbEIsdUJBQWlDb0IsU0FBakMsQ0FBaUNBLFNBQWpDLDBCQUE2QyxFQUE3QyxpQkFBb0RoQixnQkFBcEQsc0ZBQ2xCLGdEQUFJLFNBQVMsd0JBQW9CZ0IsU0FBcEIsU0FBa0NGLE1BQU0sQ0FBRyx1QkFBSCxDQUE2QixFQUFyRSxDQUFiLEVBQStGZCxnQkFBL0YsRUFFRWUsS0FBSyxDQUFDRSxHQUFOLENBQ0MsU0FBRUMsSUFBRixDQUFRQyxDQUFSLFFBQWUsaUNBQUMsY0FBRCxXQUFnQixhQUFhLENBQUd2QixhQUFoQyxDQUFnRCxHQUFHLENBQUd1QixDQUF0RCxFQUErREQsSUFBL0QsRUFBZixDQURELENBRkYsQ0FEa0IsQ0FBbkIsQ0FVQUwsVUFBVSxDQUFDVCxTQUFYLENBQXVCLENBQ3RCVSxNQUFNLENBQUVULHNCQUFVZSxJQURJLENBRXRCTCxLQUFLLENBQUVWLHNCQUFVZ0IsT0FBVixDQUNOaEIsc0JBQVVpQixLQUFWLENBQWdCLENBQ2YzQixJQUFJLENBQUVVLHNCQUFVRyxNQURELENBRWZkLElBQUksQ0FBRVcsc0JBQVVDLElBQVYsQ0FBZUMsVUFGTixDQUdmVixFQUFFLENBQUVRLHNCQUFVSSxNQUhDLENBQWhCLENBRE0sRUFNTEYsVUFSb0IsQ0FTdEJYLGFBQWEsQ0FBRVMsc0JBQVVNLFNBQVYsQ0FBb0IsQ0FBRU4sc0JBQVVHLE1BQVosQ0FBb0JILHNCQUFVSyxJQUE5QixDQUFwQixDQVRPLENBQXZCLENBWUFHLFVBQVUsQ0FBQ0QsWUFBWCxDQUEwQixDQUN6QmhCLGFBQWEsQ0FBRSxHQURVLENBQTFCLEMsYUFLZWlCLFUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGdvdi5hdS9saW5rLWxpc3QgdjMuMC44ICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogbGluay1saXN0cyBmdW5jdGlvblxuICpcbiAqIEEgc2ltcGxlIGxpc3Qgb2YgaW5saW5lIGxpbmtzLlxuICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cblxuLy8gVGhlIGZvbGxvd2luZyBsaW5lIHdpbGwgYmUgcmVwbGFjZWQgYXV0b21hdGljYWxseSB3aXRoIGdlbmVyaWMgaW1wb3J0cyBmb3IgdGhlIEVTNSBwaXBlbGluZS5cbi8vIFlvdSBjYW4gc2FmZWx5IGlnbm9yZSB0aGlzIGJpdCBpZiB5b3UgdXNlIHRoaXMgbW9kdWxlIHdpdGggcGFuY2FrZVxuLy9cbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG4vKipcbiAqIEFuIGl0ZW0gaW5zaWRlIHRoZSBBVWxpbmtMaXN0IGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSAge25vZGV9ICAgdGV4dCAgICAgICAgICAgICAtIFRoZSBsaW5rIFRleHQgb3IgbGluayBodG1sXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGxpbmsgICAgICAgICAgICAgLSBUaGUgbGluayBVUkwsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGxpbmtDb21wb25lbnQgICAgLSBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBsaW5rXG4gKiBAcGFyYW0gIHtvYmplY3R9IGxpICAgICAgICAgICAgICAgLSBBbiBhZGRpdGlvbmFsIG9iamVjdCB0byBiZSBzcHJlYWQgaW50byB0aGUgd3JhcHBpbmcgZWxlbWVudCwgb3B0aW9uYWxcbiAqIEBwYXJhbSAge29iamVjdH0gb25DbGljayAgICAgICAgICAtIFRoZSBvbkNsaWNrIGV2ZW50IGhhbmRsZXJcbiAqIEBwYXJhbSAge29iamVjdH0gYXR0cmlidXRlT3B0aW9ucyAtIEFueSBvdGhlciBhdHRyaWJ1dGUgb3B0aW9ucywgb3B0aW9uYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEFVbGlua0xpc3RJdGVtID0gKHsgdGV4dCwgbGluaywgbGlua0NvbXBvbmVudCwgbGkgPSB7fSwgY2hpbGRyZW4sIG9uQ2xpY2ssIC4uLmF0dHJpYnV0ZU9wdGlvbnMgfSkgPT4ge1xuXHRjb25zdCBMaW5rQ29tcG9uZW50ID0gbGlua0NvbXBvbmVudDtcblxuXHQvLyBJZiB0aGVyZSBpcyBubyBsaW5rIHByb3ZpZGVkIGFuZCBhbiBvbkNsaWNrIGZ1bmN0aW9uXG5cdGlmKCB0eXBlb2Ygb25DbGljayA9PT0gJ2Z1bmN0aW9uJyApIHtcblx0XHRhdHRyaWJ1dGVPcHRpb25zLm9uQ2xpY2sgPSBvbkNsaWNrO1xuXG5cdFx0Ly8gaWYgd2UgZmluZCBhbiBvbkNsaWNrIGV2ZW50IGJ1dCBubyBsaW5rIHdlIG1ha2UgaXQgYSBsaW5rIHNvIG9uQ2xpY2sgY2FuIGJlIGFkZGVkIChubyBidXR0b24gc3VwcG9ydCB5ZXQpXG5cdFx0aWYoICFsaW5rICkge1xuXHRcdFx0bGluayA9ICcjJztcblx0XHR9XG5cdH1cblxuXHQvLyBJZiB3ZSBhcmUgdXNpbmcgYSBub3JtYWwgbGlua1xuXHRpZiggTGlua0NvbXBvbmVudCA9PT0gJ2EnICkge1xuXHRcdGF0dHJpYnV0ZU9wdGlvbnMuaHJlZiA9IGxpbms7XG5cdH1cblx0Ly8gSWYgd2UgYXJlIHVzaW5nIGEgbGluayBjb21wb25lbnRcblx0ZWxzZSBpZiggdHlwZW9mIExpbmtDb21wb25lbnQgPT09ICdmdW5jdGlvbicgKSB7XG5cdFx0YXR0cmlidXRlT3B0aW9ucy50byA9IGxpbms7XG5cdH1cblxuXHRpZiggbGluayApe1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8bGkgeyAuLi5saSB9PlxuXHRcdFx0XHQ8TGlua0NvbXBvbmVudCB7IC4uLmF0dHJpYnV0ZU9wdGlvbnMgfT57IHRleHQgfTwvTGlua0NvbXBvbmVudD5cblx0XHRcdFx0eyBjaGlsZHJlbiB9XG5cdFx0XHQ8L2xpPlxuXHRcdClcblx0fVxuXG5cdHJldHVybiAoIDxsaSB7IC4uLmxpIH0+eyB0ZXh0IH17IGNoaWxkcmVuIH08L2xpPiApO1xufTtcblxuQVVsaW5rTGlzdEl0ZW0ucHJvcFR5cGVzID0ge1xuXHR0ZXh0OiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXHRsaW5rOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRsaTogUHJvcFR5cGVzLm9iamVjdCxcblx0b25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cdGxpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoWyBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYyBdKVxufTtcblxuQVVsaW5rTGlzdEl0ZW0uZGVmYXVsdFByb3BzID0ge1xuXHRsaW5rQ29tcG9uZW50OiBcImFcIixcbn07XG5cblxuLyoqXG4gKiBERUZBVUxUXG4gKiBUaGUgTGluayBMaXN0IGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSAge2FycmF5fSAgIGl0ZW1zICAgICAgICAgICAgLSBBbGwgaXRlbXMgaW5zaWRlIHRoZSBsaW5rIGxpc3QgdG8gYmUgcGFzc2VkIHRvIEFVbGlua0xpc3RJdGVtLCBmb3JtYXQ6IHsgbGluazogJycsIHRleHQ6ICcnLCBvbkNsaWNrOiAoKSB9XG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBjbGFzc05hbWUgICAgICAgIC0gQW4gYWRkaXRpb25hbCBjbGFzcywgb3B0aW9uYWxcbiAqIEBwYXJhbSAge3N0cmluZ30gIGxpbmtDb21wb25lbnQgICAgLSBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBsaW5rXG4gKiBAcGFyYW0gIHtvYmplY3R9ICBhdHRyaWJ1dGVPcHRpb25zIC0gQW55IG90aGVyIGF0dHJpYnV0ZSBvcHRpb25zLCBvcHRpb25hbFxuICovXG5jb25zdCBBVWxpbmtMaXN0ID0gKHsgaW5saW5lLCBpdGVtcywgbGlua0NvbXBvbmVudCwgY2xhc3NOYW1lID0gJycsIC4uLmF0dHJpYnV0ZU9wdGlvbnMgfSkgPT4gKFxuXHQ8dWwgY2xhc3NOYW1lPXsgYGF1LWxpbmstbGlzdCAkeyBjbGFzc05hbWUgfSR7IGlubGluZSA/ICcgYXUtbGluay1saXN0LS1pbmxpbmUnIDogJycgfWAgfSB7IC4uLmF0dHJpYnV0ZU9wdGlvbnMgfT5cblx0XHR7XG5cdFx0XHRpdGVtcy5tYXAoXG5cdFx0XHRcdCggaXRlbSwgaSApID0+IDxBVWxpbmtMaXN0SXRlbSBsaW5rQ29tcG9uZW50PXsgbGlua0NvbXBvbmVudCB9IGtleT17IGkgfSB7IC4uLml0ZW0gfSAvPlxuXHRcdFx0KVxuXHRcdH1cblx0PC91bD5cbik7XG5cbkFVbGlua0xpc3QucHJvcFR5cGVzID0ge1xuXHRpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXHRpdGVtczogUHJvcFR5cGVzLmFycmF5T2YoXG5cdFx0UHJvcFR5cGVzLnNoYXBlKHtcblx0XHRcdGxpbms6IFByb3BUeXBlcy5zdHJpbmcsXG5cdFx0XHR0ZXh0OiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXHRcdFx0bGk6IFByb3BUeXBlcy5vYmplY3QsXG5cdFx0fSlcblx0KS5pc1JlcXVpcmVkLFxuXHRsaW5rQ29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFsgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMgXSlcbn07XG5cbkFVbGlua0xpc3QuZGVmYXVsdFByb3BzID0ge1xuXHRsaW5rQ29tcG9uZW50OiBcImFcIixcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQVVsaW5rTGlzdDtcbiJdfQ==