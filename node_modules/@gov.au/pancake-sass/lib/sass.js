/***************************************************************************************************************************************************************
 *
 * Generate and compile Sass
 *
 * @repo    - https://github.com/govau/pancake
 * @author  - Dominik Wilkowski
 * @license - https://raw.githubusercontent.com/govau/pancake/master/LICENSE (MIT)
 *
 **************************************************************************************************************************************************************/
'use strict'; //--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Dependencies
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

var Autoprefixer = require('autoprefixer');

var Postcss = require('postcss');

var Sass = require('node-sass');

var Path = require('path'); //--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Included modules
//--------------------------------------------------------------------------------------------------------------------------------------------------------------


var _require = require('@gov.au/pancake'),
    Log = _require.Log,
    Style = _require.Style,
    WriteFile = _require.WriteFile; //--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Default export
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Get the include path for a sass partial
 *
 * @param  {string} module       - The module name
 * @param  {object} modules      - An object of all modules and their settings
 * @param  {string} baseLocation - The current base path
 * @param  {string} npmOrg       - The npm org scope
 *
 * @return {string}              - The path to the sass partial
 */


var GetPath = function GetPath(module, modules, baseLocation, npmOrg) {
  var modulePath = '';
  var npmOrgs = npmOrg.split(' ');
  var location;
  npmOrgs.forEach(function (org) {
    if (baseLocation.includes(org)) {
      location = baseLocation.replace("".concat(org).concat(Path.sep), '');
    }
  });
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;

      if (item.name === module) {
        if (item.pancake['pancake-module'].sass.path) {
          modulePath = Path.normalize("".concat(location, "/").concat(module, "/").concat(item.pancake['pancake-module'].sass.path));
        } else {
          modulePath = false;
        }

        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return modulePath;
};
/**
 * Look up all dependencies of a module by calling yourself
 *
 * @param  {string}  module    - The name of the module
 * @param  {object}  modules   - All modules in an object array
 * @param  {string}  parent    - The name of the parent module, Defaults to the module argument
 * @param  {integer} iteration - The depth of the iteration, defaults to 1
 *
 * @return {object}            - An object array of the dependencies that are needed for the module
 */


var GetDependencies = function GetDependencies(module, modules) {
  var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : module;
  var iteration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  Log.verbose("Sass: Looking up dependencies at level ".concat(Style.yellow(iteration)));
  var allDependencies = {};

  if (iteration > 50) {
    Log.error("Sass: Looks like we found a circular dependency that seems to go no-where from ".concat(Style.yellow(parent), "."));
  } else {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var item = _step2.value;

        if (item.name === module) {
          if (item.peerDependencies) {
            var _arr = Object.keys(item.peerDependencies);

            for (var _i = 0; _i < _arr.length; _i++) {
              var subDependency = _arr[_i];
              var subDependencies = GetDependencies(subDependency, modules, parent, iteration + 1);
              allDependencies = Object.assign(allDependencies, subDependencies);
            }
          }

          allDependencies = Object.assign(allDependencies, item.peerDependencies);
          break;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  return allDependencies;
};
/**
 * Generate Sass code for a module and it’s dependencies
 *
 * @param  {string} location - The location of the module to be compiled
 * @param  {object} name     - The name of the module
 * @param  {object} modules  - All modules and their dependencies
 * @param  {object} npmOrg   - The name of the npm org scope
 *
 * @return {string}          - Sass code to tie dependencies and module together
 */


module.exports.GenerateSass = function (location, name, modules, npmOrg) {
  var sass = ""; //the code goes here

  var baseLocation = Path.normalize("".concat(location, "/../"));
  var dependencies = GetDependencies(name, modules);
  Log.verbose("Sass: For ".concat(Style.yellow(name), " we found the following dependencies ").concat(Style.yellow(JSON.stringify(dependencies))));

  if (dependencies) {
    var _arr2 = Object.keys(dependencies);

    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
      var dependency = _arr2[_i2];

      var _modulePath = GetPath(dependency, modules, baseLocation, npmOrg);

      if (_modulePath) {
        sass += "@import \"".concat(_modulePath, "\";\n");
      }
    }
  }

  var modulePath = GetPath(name, modules, baseLocation, npmOrg);
  sass += "@import \"".concat(modulePath, "\";\n");
  return sass.replace(/\\/g, "\\\\"); // escape path for silly windows
};
/**
 * Compile Sass, autoprefix it and save it to disk
 *
 * @param  {string} location - The path we want to save the compiled css to
 * @param  {object} settings - The SettingsCSS object
 * @param  {string} sass     - The Sass to be compiled
 *
 * @return {promise object}  - Boolean true for 👍 || string error for 👎
 */


module.exports.Sassify = function (location, settings, sass) {
  return new Promise(function (resolve, reject) {
    var compiled = Sass.render({
      data: sass,
      indentType: 'tab',
      //this is how real developers indent!
      outputStyle: settings.minified ? 'compressed' : 'expanded'
    }, function (error, generated) {
      if (error) {
        Log.error("Sass compile failed for ".concat(Style.yellow(location)));
        reject(error.message);
      } else {
        Log.verbose("Sass: Successfully compiled Sass for ".concat(Style.yellow(location)));
        Postcss([Autoprefixer({
          browsers: settings.browsers
        })]).process(generated.css).catch(function (error) {
          return reject(error);
        }).then(function (prefixed) {
          if (prefixed) {
            prefixed.warnings().forEach(function (warn) {
              return Log.error(warn.toString());
            });
            Log.verbose("Sass: Successfully autoprefixed CSS for ".concat(Style.yellow(location)));
            WriteFile(location, prefixed.css) //write the generated content to file and return its promise
            .catch(function (error) {
              Log.error(error);
              reject(error);
            }).then(function () {
              resolve(true);
            });
          }
        });
      }
    });
  });
};

module.exports.GetDependencies = GetDependencies;
module.exports.GetPath = GetPath;