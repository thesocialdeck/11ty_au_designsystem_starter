"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * All different kind of button options
 *
 * @type {Object}
 */var options={"primary":"","secondary":"au-btn--secondary","tertiary":"au-btn--tertiary"};/**
 * DEFAULT
 * The primary button
 *
 * @param  {string}   linkComponent    - The component used for the link
 * @param  {string}   link             - If this is a link the location it goes
 * @param  {string}   children         - Anything inside
 * @param  {string}   as               - The kind of button, can be either 'primary', 'secondary', 'tertiary', default: 'primary'
 * @param  {boolean}  dark             - Add the dark variation class, optional
 * @param  {string}   type             - The type attribute, default: 'button', optional
 * @param  {boolean}  block            - The block option, optional
 * @param  {string}   className        - An additional class, optional
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUbutton=function AUbutton(_ref){var linkComponent=_ref.linkComponent,link=_ref.link,children=_ref.children,as=_ref.as,dark=_ref.dark,type=_ref.type,block=_ref.block,_ref$className=_ref.className,className=_ref$className===void 0?"":_ref$className,attributeOptions=_objectWithoutProperties(_ref,["linkComponent","link","children","as","dark","type","block","className"]);if(link){var LinkComponent=linkComponent;// If we are using a normal link
if(LinkComponent==="a"){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==="function"){attributeOptions.to=link}return _react.default.createElement(LinkComponent,_extends({className:"au-btn ".concat(className," ").concat(options[as]).concat(block?" au-btn--block":"").concat(dark?" au-btn--dark":"")},attributeOptions),children)}else{return _react.default.createElement("button",_extends({type:type,className:"au-btn ".concat(className," ").concat(options[as]).concat(block?" au-btn--block":"").concat(dark?" au-btn--dark":"")},attributeOptions),children)}};AUbutton.propTypes={link:_propTypes.default.string,children:_propTypes.default.node.isRequired,as:_propTypes.default.oneOf(["primary","secondary","tertiary"]).isRequired,dark:_propTypes.default.bool,type:_propTypes.default.string,block:_propTypes.default.bool,className:_propTypes.default.string,linkComponent:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.func])};AUbutton.defaultProps={type:"button",as:"primary",linkComponent:"a"};var _default=AUbutton;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJvcHRpb25zIiwiQVVidXR0b24iLCJsaW5rQ29tcG9uZW50IiwibGluayIsImNoaWxkcmVuIiwiYXMiLCJkYXJrIiwidHlwZSIsImJsb2NrIiwiY2xhc3NOYW1lIiwiYXR0cmlidXRlT3B0aW9ucyIsIkxpbmtDb21wb25lbnQiLCJocmVmIiwidG8iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJub2RlIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiYm9vbCIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI2RkFTQSxvREFDQSw2REFNQSw2QiwwaUNBR0E7Ozs7R0FLQSxHQUFNQSxDQUFBQSxPQUFPLENBQUcsQ0FDZixVQUFXLEVBREksQ0FFZixZQUFhLG1CQUZFLENBR2YsV0FBWSxrQkFIRyxDQUFoQixDQU9BOzs7Ozs7Ozs7Ozs7O0dBY0EsR0FBTUMsQ0FBQUEsUUFBUSxDQUFHLFFBQVhBLENBQUFBLFFBQVcsTUFBbUcsSUFBaEdDLENBQUFBLGFBQWdHLE1BQWhHQSxhQUFnRyxDQUFqRkMsSUFBaUYsTUFBakZBLElBQWlGLENBQTNFQyxRQUEyRSxNQUEzRUEsUUFBMkUsQ0FBakVDLEVBQWlFLE1BQWpFQSxFQUFpRSxDQUE3REMsSUFBNkQsTUFBN0RBLElBQTZELENBQXZEQyxJQUF1RCxNQUF2REEsSUFBdUQsQ0FBakRDLEtBQWlELE1BQWpEQSxLQUFpRCxxQkFBMUNDLFNBQTBDLENBQTFDQSxTQUEwQyx5QkFBOUIsRUFBOEIsZ0JBQXZCQyxnQkFBdUIsMkdBQ25ILEdBQUlQLElBQUosQ0FBVyxDQUNWLEdBQU1RLENBQUFBLGFBQWEsQ0FBR1QsYUFBdEIsQ0FFQTtBQUNBLEdBQUlTLGFBQWEsR0FBSyxHQUF0QixDQUE0QixDQUMzQkQsZ0JBQWdCLENBQUNFLElBQWpCLENBQXdCVCxJQUN4QixDQUNEO0FBSEEsSUFJSyxJQUFJLE1BQU9RLENBQUFBLGFBQVAsR0FBeUIsVUFBN0IsQ0FBMEMsQ0FDOUNELGdCQUFnQixDQUFDRyxFQUFqQixDQUFzQlYsSUFDdEIsQ0FFRCxNQUNDLDhCQUFDLGFBQUQsV0FDQyxTQUFTLGtCQUFjTSxTQUFkLGFBQTZCVCxPQUFPLENBQUVLLEVBQUYsQ0FBcEMsU0FBK0NHLEtBQUssQ0FBRyxnQkFBSCxDQUFzQixFQUExRSxTQUFpRkYsSUFBSSxDQUFHLGVBQUgsQ0FBcUIsRUFBMUcsQ0FEVixFQUVNSSxnQkFGTixFQUlHTixRQUpILENBT0QsQ0FwQkQsSUFxQkssQ0FDSixNQUNDLGlEQUNDLElBQUksQ0FBR0csSUFEUixDQUVDLFNBQVMsa0JBQWNFLFNBQWQsYUFBNkJULE9BQU8sQ0FBRUssRUFBRixDQUFwQyxTQUErQ0csS0FBSyxDQUFHLGdCQUFILENBQXNCLEVBQTFFLFNBQWlGRixJQUFJLENBQUcsZUFBSCxDQUFxQixFQUExRyxDQUZWLEVBR01JLGdCQUhOLEVBS0dOLFFBTEgsQ0FRRCxDQUNELENBakNELENBbUNBSCxRQUFRLENBQUNhLFNBQVQsQ0FBcUIsQ0FDcEJYLElBQUksQ0FBRVksbUJBQVVDLE1BREksQ0FFcEJaLFFBQVEsQ0FBRVcsbUJBQVVFLElBQVYsQ0FBZUMsVUFGTCxDQUdwQmIsRUFBRSxDQUFFVSxtQkFBVUksS0FBVixDQUFnQixDQUFFLFNBQUYsQ0FBYSxXQUFiLENBQTBCLFVBQTFCLENBQWhCLEVBQXdERCxVQUh4QyxDQUlwQlosSUFBSSxDQUFFUyxtQkFBVUssSUFKSSxDQUtwQmIsSUFBSSxDQUFFUSxtQkFBVUMsTUFMSSxDQU1wQlIsS0FBSyxDQUFFTyxtQkFBVUssSUFORyxDQU9wQlgsU0FBUyxDQUFFTSxtQkFBVUMsTUFQRCxDQVFwQmQsYUFBYSxDQUFFYSxtQkFBVU0sU0FBVixDQUFvQixDQUFFTixtQkFBVUMsTUFBWixDQUFvQkQsbUJBQVVPLElBQTlCLENBQXBCLENBUkssQ0FBckIsQ0FXQXJCLFFBQVEsQ0FBQ3NCLFlBQVQsQ0FBd0IsQ0FDdkJoQixJQUFJLENBQUUsUUFEaUIsQ0FFdkJGLEVBQUUsQ0FBRSxTQUZtQixDQUd2QkgsYUFBYSxDQUFFLEdBSFEsQ0FBeEIsQyxhQU1lRCxRIiwic291cmNlc0NvbnRlbnQiOlsiLyohIEBnb3YuYXUvYnV0dG9ucyB2My4wLjcgKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXG4gKiBidXR0b25zIGZ1bmN0aW9uXG4gKlxuICogQnV0dG9ucyBzaWduYWwgYWN0aW9uLiBVc2UgdGhlbSB0byBtb3ZlIHRoZSB1c2VyIHRocm91Z2ggdGhlIHNlcnZpY2UuXG4gKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuXG4vLyBUaGUgZm9sbG93aW5nIGxpbmUgd2lsbCBiZSByZXBsYWNlZCBhdXRvbWF0aWNhbGx5IHdpdGggZ2VuZXJpYyBpbXBvcnRzIGZvciB0aGUgRVM1IHBpcGVsaW5lLlxuLy8gWW91IGNhbiBzYWZlbHkgaWdub3JlIHRoaXMgYml0IGlmIHlvdSB1c2UgdGhpcyBtb2R1bGUgd2l0aCBwYW5jYWtlXG4vL1xuaW1wb3J0ICcuLi9jc3Mvc3R5bGVzLmNzcyc7XG5cblxuLyoqXG4gKiBBbGwgZGlmZmVyZW50IGtpbmQgb2YgYnV0dG9uIG9wdGlvbnNcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5jb25zdCBvcHRpb25zID0ge1xuXHQncHJpbWFyeSc6ICcnLFxuXHQnc2Vjb25kYXJ5JzogJ2F1LWJ0bi0tc2Vjb25kYXJ5Jyxcblx0J3RlcnRpYXJ5JzogJ2F1LWJ0bi0tdGVydGlhcnknLFxufTtcblxuXG4vKipcbiAqIERFRkFVTFRcbiAqIFRoZSBwcmltYXJ5IGJ1dHRvblxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICBsaW5rQ29tcG9uZW50ICAgIC0gVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgbGlua1xuICogQHBhcmFtICB7c3RyaW5nfSAgIGxpbmsgICAgICAgICAgICAgLSBJZiB0aGlzIGlzIGEgbGluayB0aGUgbG9jYXRpb24gaXQgZ29lc1xuICogQHBhcmFtICB7c3RyaW5nfSAgIGNoaWxkcmVuICAgICAgICAgLSBBbnl0aGluZyBpbnNpZGVcbiAqIEBwYXJhbSAge3N0cmluZ30gICBhcyAgICAgICAgICAgICAgIC0gVGhlIGtpbmQgb2YgYnV0dG9uLCBjYW4gYmUgZWl0aGVyICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXJ0aWFyeScsIGRlZmF1bHQ6ICdwcmltYXJ5J1xuICogQHBhcmFtICB7Ym9vbGVhbn0gIGRhcmsgICAgICAgICAgICAgLSBBZGQgdGhlIGRhcmsgdmFyaWF0aW9uIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7c3RyaW5nfSAgIHR5cGUgICAgICAgICAgICAgLSBUaGUgdHlwZSBhdHRyaWJ1dGUsIGRlZmF1bHQ6ICdidXR0b24nLCBvcHRpb25hbFxuICogQHBhcmFtICB7Ym9vbGVhbn0gIGJsb2NrICAgICAgICAgICAgLSBUaGUgYmxvY2sgb3B0aW9uLCBvcHRpb25hbFxuICogQHBhcmFtICB7c3RyaW5nfSAgIGNsYXNzTmFtZSAgICAgICAgLSBBbiBhZGRpdGlvbmFsIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7b2JqZWN0fSAgIGF0dHJpYnV0ZU9wdGlvbnMgLSBBbnkgb3RoZXIgYXR0cmlidXRlIG9wdGlvbnNcbiAqL1xuY29uc3QgQVVidXR0b24gPSAoeyBsaW5rQ29tcG9uZW50LCBsaW5rLCBjaGlsZHJlbiwgYXMsIGRhcmssIHR5cGUsIGJsb2NrLCBjbGFzc05hbWUgPSAnJywgLi4uYXR0cmlidXRlT3B0aW9ucyB9KSA9PiB7XG5cdGlmKCBsaW5rICkge1xuXHRcdGNvbnN0IExpbmtDb21wb25lbnQgPSBsaW5rQ29tcG9uZW50O1xuXG5cdFx0Ly8gSWYgd2UgYXJlIHVzaW5nIGEgbm9ybWFsIGxpbmtcblx0XHRpZiggTGlua0NvbXBvbmVudCA9PT0gJ2EnICkge1xuXHRcdFx0YXR0cmlidXRlT3B0aW9ucy5ocmVmID0gbGluaztcblx0XHR9XG5cdFx0Ly8gSWYgd2UgYXJlIHVzaW5nIGEgbGluayBjb21wb25lbnRcblx0XHRlbHNlIGlmKCB0eXBlb2YgTGlua0NvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyApIHtcblx0XHRcdGF0dHJpYnV0ZU9wdGlvbnMudG8gPSBsaW5rO1xuXHRcdH1cblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8TGlua0NvbXBvbmVudFxuXHRcdFx0XHRjbGFzc05hbWU9eyBgYXUtYnRuICR7IGNsYXNzTmFtZSB9ICR7IG9wdGlvbnNbIGFzIF0gfSR7IGJsb2NrID8gJyBhdS1idG4tLWJsb2NrJyA6ICcnIH0keyBkYXJrID8gJyBhdS1idG4tLWRhcmsnIDogJycgfWAgfVxuXHRcdFx0XHR7IC4uLmF0dHJpYnV0ZU9wdGlvbnMgfVxuXHRcdFx0PlxuXHRcdFx0XHR7IGNoaWxkcmVuIH1cblx0XHRcdDwvTGlua0NvbXBvbmVudD5cblx0XHQpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdHR5cGU9eyB0eXBlIH1cblx0XHRcdFx0Y2xhc3NOYW1lPXsgYGF1LWJ0biAkeyBjbGFzc05hbWUgfSAkeyBvcHRpb25zWyBhcyBdIH0keyBibG9jayA/ICcgYXUtYnRuLS1ibG9jaycgOiAnJyB9JHsgZGFyayA/ICcgYXUtYnRuLS1kYXJrJyA6ICcnIH1gIH1cblx0XHRcdFx0eyAuLi5hdHRyaWJ1dGVPcHRpb25zIH1cblx0XHRcdD5cblx0XHRcdFx0eyBjaGlsZHJlbiB9XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHQpO1xuXHR9XG59O1xuXG5BVWJ1dHRvbi5wcm9wVHlwZXMgPSB7XG5cdGxpbms6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXHRhczogUHJvcFR5cGVzLm9uZU9mKFsgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RlcnRpYXJ5JyBdKS5pc1JlcXVpcmVkLFxuXHRkYXJrOiBQcm9wVHlwZXMuYm9vbCxcblx0dHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblx0YmxvY2s6IFByb3BUeXBlcy5ib29sLFxuXHRjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGxpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoWyBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYyBdKSxcbn07XG5cbkFVYnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcblx0dHlwZTogJ2J1dHRvbicsXG5cdGFzOiAncHJpbWFyeScsXG5cdGxpbmtDb21wb25lbnQ6ICdhJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFVYnV0dG9uO1xuIl19