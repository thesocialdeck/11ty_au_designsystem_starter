"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.AUinpageNavSection=exports.AUinpageNavLinks=exports.AUinpageNavLinksItem=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * The section component for the AUinpageNavLinks component
 *
 * @param  {object} link             - The link of this section
 * @param  {object} title            - The title of the section
 * @param  {object} li               - An additional object to be spread into the wrapping element, optional
 * @param  {object} attributeOptions - Any other attribute options
 */var AUinpageNavLinksItem=function AUinpageNavLinksItem(_ref){var link=_ref.link,title=_ref.title,_ref$li=_ref.li,li=_ref$li===void 0?{}:_ref$li,attributeOptions=_objectWithoutProperties(_ref,["link","title","li"]);return _react.default.createElement("li",li,_react.default.createElement("a",_extends({href:"#".concat(link)},attributeOptions),title))};exports.AUinpageNavLinksItem=AUinpageNavLinksItem;AUinpageNavLinksItem.propTypes={link:_propTypes.default.string.isRequired,title:_propTypes.default.string.isRequired,li:_propTypes.default.object};/**
 * The inpage-nav component
 *
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {string}  title            - The title of the content link block, default: Contents
 * @param  {array}   sections         - An array of objects of all sections, sample: { link: '', title: '', onClick: () }
 * @param  {string}  className        - An additional class, optional
 * @param  {string}  ariaLabel        - The aria-label attribute, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUinpageNavLinks=function AUinpageNavLinks(_ref2){var dark=_ref2.dark,title=_ref2.title,sections=_ref2.sections,ariaLabel=_ref2.ariaLabel,_ref2$className=_ref2.className,className=_ref2$className===void 0?"":_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,["dark","title","sections","ariaLabel","className"]);return _react.default.createElement("nav",_extends({className:"au-inpage-nav-links ".concat(className).concat(dark?" au-inpage-nav-links--dark":""),ariaLabel:ariaLabel},attributeOptions),_react.default.createElement("h2",{className:"au-inpage-nav-links__heading au-display-sm"},title),_react.default.createElement("ul",{className:"au-link-list"},sections.map(function(section,i){return _react.default.createElement(AUinpageNavLinksItem,_extends({key:i},section))})))};exports.AUinpageNavLinks=AUinpageNavLinks;AUinpageNavLinks.propTypes={dark:_propTypes.default.bool,title:_propTypes.default.string.isRequired,sections:_propTypes.default.arrayOf(_propTypes.default.shape({link:_propTypes.default.string.isRequired,title:_propTypes.default.string.isRequired,li:_propTypes.default.object})).isRequired,className:_propTypes.default.string};AUinpageNavLinks.defaultProps={title:"Contents",ariaLabel:"in page navigation"};/**
 * The inpage-nav component
 *
 * @param  {string}   title            - The title of the section
 * @param  {string}   link             - The link to this section
 * @param  {DOM node} children         - The content of the section, default: '2'
 * @param  {string}   level            - The heading level of the h tag
 * @param  {string}   headingClass     - Any additional heading classes eg 'au-display-sm' etc, optional
 * @param  {string}   sectionLink      - The text for the section link, default: 'Link to section', optional
 * @param  {string}   className        - An additional class, optional
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUinpageNavSection=function AUinpageNavSection(_ref3){var title=_ref3.title,link=_ref3.link,children=_ref3.children,level=_ref3.level,headingClass=_ref3.headingClass,sectionLink=_ref3.sectionLink,_ref3$className=_ref3.className,className=_ref3$className===void 0?"":_ref3$className,attributeOptions=_objectWithoutProperties(_ref3,["title","link","children","level","headingClass","sectionLink","className"]);var HeadingTag="h".concat(level);return _react.default.createElement(Fragment,null,_react.default.createElement(HeadingTag,{className:"au-inpage-nav-section ".concat(className).concat(headingClass?" "+headingClass:"")},title,_react.default.createElement("a",_extends({id:link,className:"au-inpage-nav-section-link",href:"#".concat(link)},attributeOptions),sectionLink)),children)};exports.AUinpageNavSection=AUinpageNavSection;AUinpageNavSection.propTypes={title:_propTypes.default.string.isRequired,link:_propTypes.default.string.isRequired,children:_propTypes.default.node.isRequired,level:_propTypes.default.oneOf(["1","2","3","4","5","6"]).isRequired,headingClass:_propTypes.default.string,sectionLink:_propTypes.default.string,className:_propTypes.default.string};AUinpageNavSection.defaultProps={level:"2",sectionLink:"Link to section"};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,