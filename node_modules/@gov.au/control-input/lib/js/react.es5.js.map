{
  "version": 3,
  "sources": [
    "react.es5.js"
  ],
  "names": [
    "AUcheckbox",
    "dark",
    "alt",
    "small",
    "block",
    "label",
    "status",
    "id",
    "className",
    "attributeOptions",
    "propTypes",
    "PropTypes",
    "bool",
    "string",
    "isRequired",
    "oneOf",
    "AUradio"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/*! @gov.au/control-input v3.0.1 */\n/***************************************************************************************************************************************************************\n *\n * control-input function\n *\n * Control inputs include radio buttons and checkboxes. They allow users to select one or more options.\n *\n **************************************************************************************************************************************************************/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\n// The following line will be replaced automatically with generic imports for the ES5 pipeline.\n// You can safely ignore this bit if you use this module with pancake\n//\nimport '../css/styles.css';\n\n\n/**\n * The checkbox component\n *\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {boolean} alt              - Add the alt variation class, optional\n * @param  {boolean} small            - Add the small variation class\n * @param  {boolean} block            - Add the block variation class\n * @param  {string}  label            - The label text\n * @param  {string}  status           - Mark this field as either 'valid' or 'invalid', optional\n * @param  {string}  id               - The id of the checkbox input\n * @param  {string}  className        - An additional class, optional\n * @param  {object}  attributeOptions - Any other attribute options\n *\n */\nexport const AUcheckbox = ({ dark, alt, small, block, label, status, id, className = '', ...attributeOptions }) => {\n\treturn (\n\t\t<div className={\n\t\t\t`au-control-input ${ className }` +\n\t\t\t`${ dark ? ' au-control-input--dark' : '' }` +\n\t\t\t`${ alt ? ' au-control-input--alt' : '' }` +\n\t\t\t`${ small ? ' au-control-input--small' : '' }` +\n\t\t\t`${ block ? ` au-control-input--block` : '' }` +\n\t\t\t`${ status === 'valid' ? ' au-control-input--valid' : '' }` +\n\t\t\t`${ status === 'invalid' ? ' au-control-input--invalid' : '' }`\n\t\t}>\n\t\t\t<input className=\"au-control-input__input\" id={ id } type=\"checkbox\" { ...attributeOptions } />\n\t\t\t<label className=\"au-control-input__text\" htmlFor={ id }>{ label }</label>\n\t\t</div>\n\t);\n};\n\nAUcheckbox.propTypes = {\n\tdark: PropTypes.bool,\n\talt: PropTypes.bool,\n\tsmall: PropTypes.bool,\n\tblock: PropTypes.bool,\n\tlabel: PropTypes.string.isRequired,\n\tid: PropTypes.string.isRequired, \n\tstatus: PropTypes.oneOf([ 'valid', 'invalid' ]),\n\tclassName: PropTypes.string,\n};\n\n\n/**\n * The radio component\n *\n * @param  {boolean} dark             - Add the dark variation class, optional\n * @param  {boolean} alt              - Add the alt variation class, optional\n * @param  {boolean} small            - Add the small variation class\n * @param  {boolean} block            - Add the block variation class\n * @param  {string}  label            - The label text\n * @param  {string}  status           - Mark this field as either 'valid' or 'invalid', optional\n * @param  {string}  id               - The id of the radio input\n * @param  {string}  className        - An additional class, optional\n * @param  {object}  attributeOptions - Any other attribute options\n */\nexport const AUradio = ({ dark, alt, small, block, label, status, id, className = '', ...attributeOptions }) => {\n\n\treturn (\n\t\t<div className={\n\t\t\t`au-control-input ${ className }` +\n\t\t\t`${ dark ? ` au-control-input--dark` : '' }` +\n\t\t\t`${ alt ? ` au-control-input--alt` : '' }` +\n\t\t\t`${ small ? ` au-control-input--small` : '' }` +\n\t\t\t`${ block ? ` au-control-input--block` : '' }` +\n\t\t\t`${ status === 'valid' ? ' au-control-input--valid' : '' }` +\n\t\t\t`${ status === 'invalid' ? ' au-control-input--invalid' : '' }`\n\t\t} >\n\t\t\t<input className=\"au-control-input__input\" type=\"radio\" id= { id } { ...attributeOptions } />\n\t\t\t<label className=\"au-control-input__text\" htmlFor = { id }>{ label }</label>\n\t\t</div>\n\t);\n};\n\nAUradio.propTypes = {\n\tdark: PropTypes.bool,\n\talt: PropTypes.bool,\n\tsmall: PropTypes.bool,\n\tblock: PropTypes.bool,\n\tlabel: PropTypes.string.isRequired,\n\tid: PropTypes.string.isRequired,\n\tstatus: PropTypes.oneOf([ 'valid', 'invalid' ]),\n\tclassName: PropTypes.string,\n};\n"
  ]
}