"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.AUkeywordListItem=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * An item inside the AUkeywordList component
 *
 * @param  {string}   repeatedName     - The repeated bit in each item
 * @param  {string}   link             - The link URL, optional
 * @param  {string}   linkComponent    - The component used for the link
 * @param  {string}   name             - The name of the item
 * @param  {object}   li               - An additional object to be spread into the wrapping element, optional
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUkeywordListItem=function AUkeywordListItem(_ref){var linkComponent=_ref.linkComponent,repeatedName=_ref.repeatedName,link=_ref.link,name=_ref.name,_ref$li=_ref.li,li=_ref$li===void 0?{}:_ref$li,attributeOptions=_objectWithoutProperties(_ref,["linkComponent","repeatedName","link","name","li"]);var LinkComponent=linkComponent;if(typeof attributeOptions.onClick==="function"){// if we find an onClick event but no link we make it a link so onClick can be added (no button support yet)
if(!link){link="#"}}if(link){// If we are using a normal link
if(LinkComponent==="a"){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==="function"){attributeOptions.to=link}}return _react.default.createElement("li",li,link?_react.default.createElement(LinkComponent,attributeOptions,_react.default.createElement("small",{className:"au-keyword-list__small"},repeatedName),name):_react.default.createElement("span",null,_react.default.createElement("small",{className:"au-keyword-list__small"},repeatedName),name))};exports.AUkeywordListItem=AUkeywordListItem;AUkeywordListItem.propTypes={repeatedName:_propTypes.default.string.isRequired,link:_propTypes.default.string,name:_propTypes.default.string.isRequired,li:_propTypes.default.object,linkComponent:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.func])};AUkeywordListItem.defaultProps={linkComponent:"a"};/**
 * DEFAULT
 * The keyword-list component
 *
 * @param  {string}  repeatedName     - The repeated bit in each item
 * @param  {array}   items            - All items in this list, format: { link: '', name: '', onClick: () }
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {string}  className        - An additional class, optional
 * @param  {string}  linkComponent    - The component used for the link
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUkeywordList=function AUkeywordList(_ref2){var repeatedName=_ref2.repeatedName,linkComponent=_ref2.linkComponent,items=_ref2.items,dark=_ref2.dark,_ref2$className=_ref2.className,className=_ref2$className===void 0?"":_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,["repeatedName","linkComponent","items","dark","className"]);return _react.default.createElement("ul",_extends({className:"au-keyword-list au-link-list ".concat(className).concat(dark?" au-keyword-list--dark":""," ")},attributeOptions),items.map(function(item,i){return _react.default.createElement(AUkeywordListItem,_extends({linkComponent:linkComponent,key:i,repeatedName:repeatedName},item))}))};AUkeywordList.propTypes={repeatedName:_propTypes.default.string.isRequired,dark:_propTypes.default.bool,items:_propTypes.default.arrayOf(_propTypes.default.shape({link:_propTypes.default.string,name:_propTypes.default.string.isRequired,li:_propTypes.default.object})).isRequired,className:_propTypes.default.string,linkComponent:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.func])};AUkeywordList.defaultProps={linkComponent:"a"};var _default=AUkeywordList;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,